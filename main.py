from flask import Flask, request, jsonify
from flask_cors import CORS
from cvss_calculator import CVSSCalculator
from test_vulnerabilty import Predictor
from Converter import Converter
import json
import os

app = Flask(__name__)
CORS(app)


def calculate_base_metrics(av, ac, pr, ui, s, ci, ii, ai):
    cvss_calculator = CVSSCalculator()
    ISS, impact_score, exploitability_score, base_score = cvss_calculator.calc_cvss(av, ac, pr, ui, s, ci, ii, ai)
    return ISS, impact_score, exploitability_score, base_score


@app.route('/training_data', methods=['POST'])
def training_data():
    print("Data incoming")
    data = (request.json['data'])
    file_name = (request.json['file_name'])
    file_name = os.path.splitext(file_name)[0]

    print(data)
    print('file_name: ', file_name)
    print("Data received successful")

    file_path = os.path.join('Data', 'json2', file_name + '.json')

    with open(file_path, 'w') as file:
        json.dump(data, file)

    print("This works...................")

    converter = Converter(file_name)
    converter.convert_to_csv()

    return jsonify({
        'message': "Training Completed!!!"
    })


@app.route('/calculate_score_using_base_metrics', methods=['POST'])
def calculate_score_using_base_metrics():
    av = (request.json['AV'])
    ac = (request.json['AC'])
    pr = (request.json['PR'])
    ui = (request.json['UI'])
    s = (request.json['S'])
    ci = (request.json['CI'])
    ii = (request.json['II'])
    ai = (request.json['AI'])
    description = ""
    print(request.json)

    ISS, impact_score, exploitability_score, base_score = calculate_base_metrics(av, ac, pr, ui, s, ci, ii, ai)

    print("Result: ", base_score)
    severity = "Critical"  # .........................if else mara lagbe...............
    return jsonify({
        'description': description,
        'attackVector': av,
        'attackComplexity': ac,
        'privilegesRequired': pr,
        'userInteraction': ui,
        'scope': s,
        'confidentialityImpact': ci,
        'integrityImpact': ii,
        'availabilityImpact': ai,
        'impactSubScore': ISS,
        'impactScore': impact_score,
        'exploitabilityScore': exploitability_score,
        'baseScore': base_score,
        'severity': severity
    })


def calculate_score_using_base_metrics2():
    av = "NETWORK"
    ac = "LOW"
    pr = "LOW"
    ui = "NONE"
    s = "UNCHANGED"
    ci = "NONE"
    ii = "HIGH"
    ai = "NONE"
    description = ""
    ISS, impact_score, exploitability_score, base_score = calculate_base_metrics(av, ac, pr, ui, s, ci, ii, ai)

    print("Result: ", base_score)

    response = {
        'description': description,
        'attackVector': av,
        'attackComplexity': ac,
        'privilegesRequired': pr,
        'userInteraction': ui,
        'scope': s,
        'confidentialityImpact': ci,
        'integrityImpact': ii,
        'availabilityImpact': ai,
        'impactSubScore': ISS,
        'impactScore': impact_score,
        'exploitabilityScore': exploitability_score,
        'baseScore': base_score
    }

    return response


@app.route('/calculate_score_using_description', methods=['POST'])
def calculate_score_using_description():
    data = request.json['Description']

    description = [data]

    print(description)

    models = ['AttackVector', 'AttackComplexity', 'PrivilegesRequired', 'UserInteraction',
              'Scope', 'ConfidentialityImpact', 'IntegrityImpact', 'AvailabilityImpact']

    labels = [
        ['PHYSICAL', 'LOCAL', 'NETWORK', 'ADJACENT'],
        ['LOW', 'HIGH'],
        ['NONE', 'LOW', 'HIGH'],
        ['NONE', 'REQUIRED'],
        ['UNCHANGED', 'CHANGED'],
        ['NONE', 'LOW', 'HIGH'],
        ['NONE', 'LOW', 'HIGH'],
        ['NONE', 'LOW', 'HIGH']
    ]

    baseMetrics = []

    for model_path, label in zip(models, labels):
        path = 'Saved_Models/' + model_path
        predictor = Predictor(path, label)
        baseMetrics.append(predictor.predict_bert_metrices(description))

    print(baseMetrics)

    ISS, impact_score, exploitability_score, base_score = calculate_base_metrics(*baseMetrics)

    print(ISS, impact_score, exploitability_score, base_score)

    severity = "Critical"  # .........................if else mara lagbe...............
    return jsonify({


        'description': description,
        'attackVector': baseMetrics[0],
        'attackComplexity':  baseMetrics[1],
        'privilegesRequired':  baseMetrics[2],
        'userInteraction':  baseMetrics[3],
        'scope':  baseMetrics[4],
        'confidentialityImpact':  baseMetrics[5],
        'integrityImpact':  baseMetrics[6],
        'availabilityImpact':  baseMetrics[7],
        'impactSubScore': ISS,
        'impactScore': impact_score,
        'exploitabilityScore': exploitability_score,
        'baseScore': base_score,
        'severity': severity

    })


if __name__ == '__main__':
    app.run(host='0.0.0.0')
