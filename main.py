from flask import Flask, request, jsonify
from flask_cors import CORS
from cvss_calculator import CVSSCalculator
from Predictor import Predictor
from Converter import Converter
from training import Trainer
import json
import os
import pandas as pd

app = Flask(__name__)
CORS(app)


def calculate_base_metrics(av, ac, pr, ui, s, ci, ii, ai):
    cvss_calculator = CVSSCalculator()
    ISS, impact_score, exploitability_score, base_score = cvss_calculator.calc_cvss(av, ac, pr, ui, s, ci, ii, ai)
    return ISS, impact_score, exploitability_score, base_score


@app.route('/training_data', methods=['POST'])
def training_data():
    print("Data incoming")
    data = (request.json['data'])
    file_name = (request.json['file_name'])
    file_name = os.path.splitext(file_name)[0]

    print(data)
    print('file_name: ', file_name)
    print("Data received successful")

    file_path = os.path.join('Data', 'json', file_name + '.json')

    with open(file_path, 'w') as file:
        json.dump(data, file)

    converter = Converter(file_name)
    converter.convert_to_csv()

    print("Starting training......................................................")
    data = pd.read_csv('Data/csv/' + file_name + '.csv', encoding='latin1').dropna()




    print(data)
    label_names = ['attackVector', 'attackComplexity', 'privilegesRequired', 'userInteraction', 'scope',
                   'confidentialityImpact', 'integrityImpact', 'availabilityImpact']

    for label_name in label_names:
        print(label_name, ".........................................................................................")
        X_train = data['description']
        y_train = data[label_name]
        unique_label = list(set(y_train))
        num_labels = len(unique_label)

        trainer = Trainer(baseModel="./model/bert_uncased_L-4_H-512_A-8",
                            tokenizer="./model/bert_uncased_L-4_H-512_A-8", num_labels=num_labels)

        print("Initializing done for label:", label_name)
        trainer.prepare_data(train_descriptions=X_train, train_label=y_train)
        print("Data preparation done for label:", label_name)

        trainer.train_model(path_new_model="Saved_Models2/" + label_name + "/")

        print("Training for label:", label_name, "completed.")

    return jsonify({
        'message': "Training Successful!!!"
    })


@app.route('/calculate_score_using_base_metrics', methods=['POST'])
def calculate_score_using_base_metrics():
    av = (request.json['AV'])
    ac = (request.json['AC'])
    pr = (request.json['PR'])
    ui = (request.json['UI'])
    s = (request.json['S'])
    ci = (request.json['CI'])
    ii = (request.json['II'])
    ai = (request.json['AI'])
    description = ""
    print(request.json)

    ISS, impact_score, exploitability_score, base_score = calculate_base_metrics(av, ac, pr, ui, s, ci, ii, ai)

    print("Result: ", base_score)

    if base_score > 9.0:
        severity = "Critical"
    elif base_score > 7.0:
        severity = 'High'
    elif base_score > 4.0:
        severity = "Medium"
    elif base_score > 0:
        severity = "Low"
    else:
        severity = "NONE"

    return jsonify({
        'description': description,
        'attackVector': av,
        'attackComplexity': ac,
        'privilegesRequired': pr,
        'userInteraction': ui,
        'scope': s,
        'confidentialityImpact': ci,
        'integrityImpact': ii,
        'availabilityImpact': ai,
        'impactSubScore': ISS,
        'impactScore': impact_score,
        'exploitabilityScore': exploitability_score,
        'baseScore': base_score,
        'severity': severity
    })


def calculate_score_using_base_metrics2():
    av = "NETWORK"
    ac = "LOW"
    pr = "LOW"
    ui = "NONE"
    s = "UNCHANGED"
    ci = "NONE"
    ii = "HIGH"
    ai = "NONE"
    description = ""
    ISS, impact_score, exploitability_score, base_score = calculate_base_metrics(av, ac, pr, ui, s, ci, ii, ai)

    print("Result: ", base_score)

    response = {
        'description': description,
        'attackVector': av,
        'attackComplexity': ac,
        'privilegesRequired': pr,
        'userInteraction': ui,
        'scope': s,
        'confidentialityImpact': ci,
        'integrityImpact': ii,
        'availabilityImpact': ai,
        'impactSubScore': ISS,
        'impactScore': impact_score,
        'exploitabilityScore': exploitability_score,
        'baseScore': base_score
    }

    return response


@app.route('/calculate_score_using_description', methods=['POST'])
def calculate_score_using_description():
    data = request.json['Description']

    description = [data]

    print(description)

    models = ['AttackVector', 'AttackComplexity', 'PrivilegesRequired', 'UserInteraction',
              'Scope', 'ConfidentialityImpact', 'IntegrityImpact', 'AvailabilityImpact']

    labels = [
        ['PHYSICAL', 'LOCAL', 'NETWORK', 'ADJACENT'],
        ['LOW', 'HIGH'],
        ['NONE', 'LOW', 'HIGH'],
        ['NONE', 'REQUIRED'],
        ['UNCHANGED', 'CHANGED'],
        ['NONE', 'LOW', 'HIGH'],
        ['NONE', 'LOW', 'HIGH'],
        ['NONE', 'LOW', 'HIGH']
    ]

    baseMetrics = []

    for model_path, label in zip(models, labels):
        path = 'Saved_Models/' + model_path
        predictor = Predictor(path, label)
        baseMetrics.append(predictor.predict_bert_metrices(description))

    print(baseMetrics)

    ISS, impact_score, exploitability_score, base_score = calculate_base_metrics(*baseMetrics)

    print(ISS, impact_score, exploitability_score, base_score)

    if base_score > 9.0:
        severity = "Critical"
    elif base_score > 7.0:
        severity = 'High'
    elif base_score > 4.0:
        severity = "Medium"
    elif base_score > 0:
        severity = "Low"
    else:
        severity = "NONE"
    return jsonify({

        'description': description,
        'attackVector': baseMetrics[0],
        'attackComplexity': baseMetrics[1],
        'privilegesRequired': baseMetrics[2],
        'userInteraction': baseMetrics[3],
        'scope': baseMetrics[4],
        'confidentialityImpact': baseMetrics[5],
        'integrityImpact': baseMetrics[6],
        'availabilityImpact': baseMetrics[7],
        'impactSubScore': ISS,
        'impactScore': impact_score,
        'exploitabilityScore': exploitability_score,
        'baseScore': base_score,
        'severity': severity

    })


def mapQA_to_baseMetrcis(q):
    base_metrics = [None]*8

    # Attack Vector - 0
    if q[0] == '1':
        if q[1] == '1':
            base_metrics[0] = "PHYSICAL"
        else:
            base_metrics[0] = "LOCAL"
    elif q[0] == '2':
        base_metrics[0] = "ADJACENT"
    else:
        base_metrics[0] = "NETWORK"

    # Attack Complexity - 1
    if q[2] == '1' or q[3] == '1':
        base_metrics[1] = "HIGH"
    else:
        base_metrics[1] = "LOW"

    # Privileges Required - 2
    if q[4] == '1':
        base_metrics[2] = "NONE"
    else:
        if q[5] == '1':
            base_metrics[2] = "LOW"
        else:
            base_metrics[2] = "HIGH"

    # User Interaction - 3
    if q[6] == '1':
        base_metrics[3] = "NONE"
    else:
        base_metrics[3] = "REQUIRED"

    # Scope - 4
    if q[7] == '1':
        base_metrics[4] = "CHANGED"
    else:
        base_metrics[4] = "UNCHANGED"

    # Confidentiality Impact - 5
    if q[8] == '1':
        base_metrics[5] = "HIGH"
    else:
        if q[9] == '1':
            base_metrics[5] = "LOW"
        else:
            base_metrics[5] = "NONE"

    # Integrity Impact - 6
    if q[10] == '1':
        base_metrics[6] = "HIGH"
    else:
        if q[11] == '1':
            base_metrics[6] = "LOW"
        else:
            base_metrics[6] = "NONE"

    # Availability Impact - 7
    if q[12] == '1':
        base_metrics[7] = "HIGH"
    else:
        if q[13] == '1':
            base_metrics[7] = "LOW"
        else:
            base_metrics[7] = "NONE"

    return base_metrics;

@app.route('/calculate_score_using_QA', methods=['POST'])
def calculate_score_using_QA():
    questions = [None]*14
    baseMetrics = []

    print("question coming in")
    questions[0] = (request.json['q1'])
    questions[1] = (request.json['q2'])
    questions[2] = (request.json['q3'])
    questions[3] = (request.json['q4'])
    questions[4] = (request.json['q5'])
    questions[5] = (request.json['q6'])
    questions[6] = (request.json['q7'])
    questions[7] = (request.json['q8'])
    questions[8] = (request.json['q9'])
    questions[9] = (request.json['q10'])
    questions[10] = (request.json['q11'])
    questions[11] = (request.json['q12'])
    questions[12] = (request.json['q13'])
    questions[13] = (request.json['q14'])
    description = ""

    print(questions)



    baseMetrics = mapQA_to_baseMetrcis(questions)

    print(baseMetrics)

    ISS, impact_score, exploitability_score, base_score = calculate_base_metrics(baseMetrics[0],baseMetrics[1],
                                                                                 baseMetrics[2],baseMetrics[3],
                                                                                 baseMetrics[4],baseMetrics[5],
                                                                                 baseMetrics[6],baseMetrics[7])


    if base_score > 9.0:
        severity = "Critical"
    elif base_score > 7.0:
        severity = 'High'
    elif base_score > 4.0:
        severity = "Medium"
    elif base_score > 0:
        severity = "Low"
    else:
        severity = "NONE"

    print(base_score, severity)
    return jsonify({

        'description': description,
        'attackVector': baseMetrics[0],
        'attackComplexity': baseMetrics[1],
        'privilegesRequired': baseMetrics[2],
        'userInteraction': baseMetrics[3],
        'scope': baseMetrics[4],
        'confidentialityImpact': baseMetrics[5],
        'integrityImpact': baseMetrics[6],
        'availabilityImpact': baseMetrics[7],
        'impactSubScore': ISS,
        'impactScore': impact_score,
        'exploitabilityScore': exploitability_score,
        'baseScore': base_score,
        'severity': severity,
        'q1': questions[0],
        'q2': questions[1],
        'q3': questions[2],
        'q4': questions[3],
        'q5': questions[4],
        'q6': questions[5],
        'q7': questions[6],
        'q8': questions[7],
        'q9': questions[8],
        'q10': questions[9],
        'q11': questions[10],
        'q12': questions[11],
        'q13': questions[12],
        'q14': questions[13],

    })


if __name__ == '__main__':
    app.run(host='0.0.0.0')
