import csv

import pandas as pd


def calc_cvss():
    return 7.5


class CVSSCalculator():
    def __init__(self, parent=None):

        self.met_value_mapping = {
            'attackVector': {
                'NETWORK': 0.85,
                'ADJACENT': 0.62,
                'LOCAL': 0.55,
                'PHYSICAL': 0.2
            },
            'attackComplexity': {
                'LOW': 0.77,
                'HIGH': 0.44
            },
            'privilegesRequired': {
                'NONEUNCHANGED': 0.85,
                'NONECHANGED': 0.85,
                'LOWUNCHANGED': 0.62,
                'LOWCHANGED': 0.68,
                'HIGHUNCHANGED': 0.27,
                'HIGHCHANGED': 0.5
            },
            'userInteraction': {
                'NONE': 0.85,
                'REQUIRED': 0.62
            },
            'confidentialityImpact': {
                'NONE': 0,
                'HIGH': 0.56,
                'LOW': 0.22
            },
            'integrityImpact': {
                'NONE': 0,
                'HIGH': 0.56,
                'LOW': 0.22
            },
            'availabilityImpact': {
                'NONE': 0,
                'HIGH': 0.56,
                'LOW': 0.22
            },
        }

    def roundup(self, val):
        if val == int(val): return val
        return float(('{0:.1f}'.format((val + 0.05))))

    def onedec(self, val):
        return float(('{0:.1f}'.format(val)))

    def calc_cvss(self, attack_vector, attack_complexity, privilege_required, user_interaction, scope,
                  confidentiality_impact, integrity_impact, availability_impact):

        ISS = 1 - ((1 - self.met_value_mapping['confidentialityImpact'][confidentiality_impact]) * (
                1 - self.met_value_mapping['integrityImpact'][integrity_impact]) * (
                           1 - self.met_value_mapping['availabilityImpact'][availability_impact]))

        if scope == 'CHANGED':
            impact_score = 7.52 * (ISS - 0.029) - 3.25 * (ISS - 0.02) ** 15
        else:
            impact_score = ISS * 6.42

        exploitability_score = 8.22 * self.met_value_mapping['attackVector'][attack_vector] * \
                              self.met_value_mapping['attackComplexity'][attack_complexity] * \
                              self.met_value_mapping['privilegesRequired'][privilege_required + scope] * \
                              self.met_value_mapping['userInteraction'][user_interaction]

        if impact_score <= 0:
            base_score = 0
        elif scope == 'CHANGED':
            base_score = self.roundup(min(1.08 * (impact_score + exploitability_score), 10))
        else:
            base_score = self.roundup(min((impact_score + exploitability_score), 10))

        print("ISS: ", ISS)
        print("impact Score: ", impact_score)
        print("Exploitability Score", exploitability_score)
        print("Base Score: ", base_score)

        return round(ISS,2), round(impact_score,2), round(exploitability_score,2), round(base_score,2)


if __name__ == "__main__":
    # data = pd.read_csv('data/data_2017.csv')
    cc = CVSSCalculator()
    cc.calc_cvss()
