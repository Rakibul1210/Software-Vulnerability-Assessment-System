import csv

import pandas as pd


class CVSSCalculator():
    def __init__(self, parent=None):

        self.met_value_mapping = {
            'attackVector': {
                'NETWORK': 0.85,
                'ADJACENT_NETWORK': 0.62,
                'LOCAL': 0.55,
                'PHYSICAL': 0.2
            },
            'attackComplexity': {
                'LOW': 0.77,
                'HIGH': 0.44
            },
            'privilegesRequired': {
                'NONEUNCHANGED': 0.85,
                'NONECHANGED': 0.85,
                'LOWUNCHANGED': 0.62,
                'LOWCHANGED': 0.68,
                'HIGHUNCHANGED': 0.27,
                'HIGHCHANGED': 0.5
            },
            'userInteraction': {
                'NONE': 0.85,
                'REQUIRED': 0.62
            },
            'confidentialityImpact': {
                'NONE': 0,
                'HIGH': 0.56,
                'LOW': 0.22
            },
            'integrityImpact': {
                'NONE': 0,
                'HIGH': 0.56,
                'LOW': 0.22
            },
            'availabilityImpact': {
                'NONE': 0,
                'HIGH': 0.56,
                'LOW': 0.22
            },
        }

    def roundup(self, val):
        if val == int(val): return val
        return float(('{0:.1f}'.format((val + 0.05))))

    def onedec(self, val):
        return float(('{0:.1f}'.format((val))))

    def calc_cvss(self):

        data = pd.read_csv('data_2017.csv')

        allcols = ['ID','description', 'attackVector', 'attackComplexity', 'privilegesRequired', 'userInteraction', 'scope',
                   'confidentialityImpact', 'integrityImpact', 'availabilityImpact']

        data = data[allcols].dropna().reset_index()


        id = data['ID']
        av = data['attackVector']
        ac = data['attackComplexity']
        pr = data['privilegesRequired']
        ui = data['userInteraction']
        ci = data['confidentialityImpact']
        ii = data['integrityImpact']
        ai = data['availabilityImpact']

        scope = data['scope']

        print(av)

        n = len(av)
        id = list(id)
        ISS = [0] * n
        exploitabilityScore = [0] * n
        impactScore = [0] * n
        baseScore = [0] * n
        # temp_dictionary= dict(self.met_value_mapping)

        for i in range(n):

            ISS[i] = 1 - ((1 - self.met_value_mapping['confidentialityImpact'][ci[i]]) * (
                    1 - self.met_value_mapping['integrityImpact'][ii[i]]) * (
                                  1 - self.met_value_mapping['availabilityImpact'][ai[i]]))

            if scope[i] == 'CHANGED':
                impactScore[i] = 7.52 * (ISS[i] - 0.029) - 3.25 * (ISS[i] - 0.02) ** 15
            else:
                impactScore[i] = ISS[i] * 6.42

            exploitabilityScore[i] = 8.22 * self.met_value_mapping['attackVector'][av[i]] * \
                                     self.met_value_mapping['attackComplexity'][ac[i]] * \
                                     self.met_value_mapping['privilegesRequired'][pr[i] + scope[i]] * \
                                     self.met_value_mapping['userInteraction'][ui[i]]

            if impactScore[i] <= 0:
                baseScore[i] = 0
            elif scope[i] == 'CHANGED':
                baseScore[i] = self.roundup(min(1.08 * (impactScore[i] + exploitabilityScore[i]), 10))
            else:
                baseScore[i] = self.roundup(min((impactScore[i] + exploitabilityScore[i]), 10))

            print("\n", i)
            print("ID: ", id[i])
            print("ISS: ", ISS[i])
            print("impact Score: ", impactScore[i])
            print("Exploitability Score", exploitabilityScore[i])
            print("Base Score: ", baseScore[i])





        row = ["ID", "ISS", "Impact Score", "Exploitability Score", "Base Score"]

        f = open('output_2017.csv', 'w')
        csv_writer = csv.writer(f)

        csv_writer.writerow(row)

        rows = zip(id, ISS, impactScore, exploitabilityScore, baseScore)

        for row in rows:
            csv_writer.writerow(row)


if __name__ == "__main__":
    # data = pd.read_csv('data/data_2017.csv')
    cc = CVSSCalculator()
    cc.calc_cvss()
