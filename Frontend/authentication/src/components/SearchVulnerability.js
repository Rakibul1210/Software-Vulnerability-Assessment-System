import React, { useRef } from 'react';
import { useParams } from 'react-router-dom';
import { useState, useEffect } from 'react';
import axios from 'axios';
import Table from 'react-bootstrap/Table';
import { Row, Col, Form } from 'react-bootstrap';
import './Headers/ShowVulnerability.css';
import LOGO from '../images/dark.png';
import { useReactToPrint } from 'react-to-print';
import { Dropdown, Menu, Button, message } from 'antd';
import { CopyOutlined, MenuOutlined, PrinterOutlined } from '@ant-design/icons';

const SearchVulnerability = () => {
    const params = useParams();
    const [showDiv, setShowDiv] = useState(false);
    const componentRef = useRef();

    const [year, setYear] = useState(null);
    const [month, setMonth] = useState(null);
    const [day, setDay] = useState(null);
    const [hours, setHours] = useState(null);
    const [minutes, setMinutes] = useState(null);
    const [seconds, setSeconds] = useState(null);
    const [vulnerability, setVulnerability] = useState();
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        axios
            .post('http://localhost:5050/vulnerability/getVulnerabilityByID', {
                id: params.vID
            })
            .then((response) => {
                setVulnerability(response.data.vulnerability);
                console.log(response.data.vulnerability);

                const dateTime = new Date(response.data.vulnerability.createdAt);

                setYear(dateTime.getFullYear());
                setMonth(dateTime.getMonth() + 1);
                setDay(dateTime.getDate());
                setHours(dateTime.getHours());
                setMinutes(dateTime.getMinutes());
                setSeconds(dateTime.getSeconds());

                if (response.data.vulnerability.description) {
                    setShowDiv(true);
                };

                setLoading(false);
            });
    }, [params.vID]);

    useEffect(() => {
        console.log('vulnerability: ', vulnerability);
    }, [vulnerability]);

    const handlePrint = useReactToPrint({
        content: () => componentRef.current,
        onBeforeGetContent: () => {
            const printButton = document.getElementById('print-button');
            const dropButton = document.getElementById('drop-button');
            if (printButton) {
                printButton.style.display = 'none';
            }
            if (dropButton) {
                dropButton.style.display = 'none';
            }
            console.log('Preparing to print...');
        },
        onAfterPrint: () => {
            const printButton = document.getElementById('print-button');
            const dropButton = document.getElementById('drop-button');
            if (printButton) {
                printButton.style.display = 'block';
            }
            if (dropButton) {
                dropButton.style.display = 'block';
            }
            console.log('Printing completed!');
        }
    });

    const handleCopyLink = () => {
        const link = `http://localhost:3000/searchVulnerability/${params.vID}`;
        navigator.clipboard.writeText(link);
        message.success('Link copied!');
    };

    const menu = (
        <Menu>
            <Menu.Item key='copyLink' icon={<CopyOutlined />} onClick={handleCopyLink}>
                Copy Link
            </Menu.Item>
            <Menu.Item key='printPDF' icon={<PrinterOutlined />} onClick={handlePrint}>
                Print PDF
            </Menu.Item>
        </Menu>
    );

    return (
        <>
            {loading ? (
                <div className="loading-indicator">Loading...</div>
            ) : (
                <div className='container' ref={componentRef} style={{ marginBottom: 100 }}>
                    <div style={{ display: 'flex', justifyContent: 'flex-end', marginTop: 20 }}>
                        <Dropdown overlay={menu}>
                            <Button
                                id='drop-button'
                                type='primary'
                                icon={<MenuOutlined />}
                                size='large'
                                ghost
                                style={{ background: 'none', border: 'none' }}
                            />
                        </Dropdown>
                    </div>
                    <div className='demo-logo-vertical' style={{ display: 'flex', justifyContent: 'center' }}>
                        <img src={LOGO} alt='Logo' style={{ width: '180px', marginTop: '10px', marginBottom: '10px' }} />
                    </div>
                    <h5 style={{ textAlign: 'center', marginBottom: 40, marginTop: 10 }}>
                        <strong>Software Vulnerability Assessment System</strong>
                    </h5>

                    <h2 style={{ textAlign: 'center', marginBottom: 40, marginTop: 10 }}>
                        <strong>Test ID: </strong>{vulnerability.id}
                    </h2>
                    <Row className='vulnerability-header'>
                        <Col className='text-right'>
                            <h6>
                                <strong>User Name: </strong> {vulnerability.userName}
                            </h6>
                        </Col>
                        <Col className='text-right'>
                            <h6>
                                <strong>Creation Date: </strong> {day}-{month}-{year}{' '}
                            </h6>
                        </Col>
                        <Col className='text-right'>
                            <h6>
                                <strong>Creation TIme: </strong> {hours}:{minutes}:{seconds}{' '}
                            </h6>
                        </Col>
                    </Row>
                    {showDiv && (
                        <div>
                            <p>
                                <strong>Description:</strong>
                            </p>
                            <Row>
                                <Col className='d-flex justify-content-center'>
                                    <div className='message-box border'>
                                        <p>{vulnerability.description}</p>
                                    </div>
                                </Col>
                            </Row>
                        </div>
                    )}
                    <Row>
                        <Col>
                            <Form>
                                <Form.Group>
                                    <Form.Label>Attack vector:</Form.Label>
                                    <Form.Control type='text' value={vulnerability.attackVector} readOnly />
                                </Form.Group>
                                <Form.Group>
                                    <Form.Label>Attack complexity:</Form.Label>
                                    <Form.Control type='text' value={vulnerability.attackComplexity} readOnly />
                                </Form.Group>
                                <Form.Group>
                                    <Form.Label>Privileges required:</Form.Label>
                                    <Form.Control type='text' value={vulnerability.privilegesRequired} readOnly />
                                </Form.Group>
                                <Form.Group>
                                    <Form.Label>User interaction:</Form.Label>
                                    <Form.Control type='text' value={vulnerability.userInteraction} readOnly />
                                </Form.Group>
                            </Form>
                        </Col>
                        <Col>
                            <Form>
                                <Form.Group>
                                    <Form.Label>Scope:</Form.Label>
                                    <Form.Control type='text' value={vulnerability.scope} readOnly />
                                </Form.Group>
                                <Form.Group>
                                    <Form.Label>Confidentiality:</Form.Label>
                                    <Form.Control type='text' value={vulnerability.confidentialityImpact} readOnly />
                                </Form.Group>
                                <Form.Group>
                                    <Form.Label>Integrity:</Form.Label>
                                    <Form.Control type='text' value={vulnerability.integrityImpact} readOnly />
                                </Form.Group>
                                <Form.Group>
                                    <Form.Label>Availability:</Form.Label>
                                    <Form.Control type='text' value={vulnerability.availabilityImpact} readOnly />
                                </Form.Group>
                            </Form>
                        </Col>
                        <Col className='scoreTable'>
                            <Table striped bordered style={{ marginTop: 25 }}>
                                <thead>
                                    <tr>
                                        <th>Field</th>
                                        <th>Score</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td>Impact Sub Score</td>
                                        <td>{vulnerability.impactSubScore}</td>
                                    </tr>
                                    <tr>
                                        <td>Impact Score</td>
                                        <td>{vulnerability.impactScore}</td>
                                    </tr>
                                    <tr>
                                        <td>Exploitability Score</td>
                                        <td>{vulnerability.exploitabilityScore}</td>
                                    </tr>
                                    <tr>
                                        <td>CVSS Score</td>
                                        <td>{vulnerability.baseScore}</td>
                                    </tr>
                                    <tr>
                                        <td>Severity</td>
                                        <td>{vulnerability.severity}</td>
                                    </tr>
                                </tbody>
                            </Table>
                        </Col>
                    </Row>
                </div>

            )}
        </>
    );
};

export default SearchVulnerability;





